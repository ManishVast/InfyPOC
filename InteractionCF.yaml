AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation template file to create DynamoDB CI table.
Resources:
  myDynamoDBTable: 
    Type: 'AWS::DynamoDB::Table'
    Properties: 
      TableName: '2xsfnv-ck529-UCDP-CustomerInteractions-table'
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: InteractionDt
          AttributeType: S
        - AttributeName: Intent
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      GlobalSecondaryIndexes:
        - IndexName: GSI_Basic
          KeySchema:
            - AttributeName: PK
              KeyType: HASH
            - AttributeName: InteractionDt
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
          Projection:
            ProjectionType: ALL
        - IndexName: GSI_Intent_DateRange
          KeySchema:
            - AttributeName: Intent
              KeyType: HASH
            - AttributeName: InteractionDt
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
          Projection:
            ProjectionType: ALL

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'DataIngestionLambda_CF'
      Handler: 'lambda_function.handler'
      Role: arn:aws:iam::637160599647:role/FPL_Test_S3
      Runtime: 'python3.12'
      Timeout: 900
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:13
      Code:
        ZipFile: | 
          import boto3
          import json
          import pandas as pd
          import io
          import urllib3
          http = urllib3.PoolManager()

          def handler(event, context):
              print("Event", event)
              s3 = boto3.client('s3')
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('2xsfnv-ck529-UCDP-CustomerInteractions-table')
              bucket = 'fpl-deployment-poc'
              key = 'PwC/Data_Load_DB.xlsx'
              print(f"Fetching file from bucket: {bucket}, key: {key}")
              try:
                  response = s3.get_object(Bucket=bucket, Key=key)
                  file_content = response['Body'].read()
                  df = pd.read_excel(io.BytesIO(file_content))
                  for index, row in df.iterrows():
                      table.put_item(
                          Item={
                              'PK': row['PK'],
                              'SK': row['SK'],
                              'InteractionDt': row['InteractionDt'],
                              'Intent': row['Intent'],
                              'AcctId': row['AcctId'],
                              'AgentName': row['AgentName'],
                              'AgentSLID': row['AgentSLID'],
                              'AnimalRpt': row['AnimalRpt'],
                              'Channel': row['Channel'],
                              'ContractAcctId': row['ContractAcctId'],
                              'CustIdentifier': row['CustIdentifier'],
                              'EntityType': row['EntityType'],
                              'Email': row['Email'],
                              'PhoneNum': row['PhoneNum'],
                              'Source': row['Source']
                          }
                      )
                  send(event, context, "SUCCESS", {'Message': 'Data ingestion complete'})
              except Exception as e:
                  # Send failure response to CloudFormation
                  send(event, context, "FAILED", {'Message': str(e)})
              return {
                  'statusCode': 200,
                  'body': 'Data ingestion complete'
              }

          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']

              responseBody = {
                  'Status': responseStatus,
                  'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': physicalResourceId or context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'NoEcho': noEcho,
                  'Data': responseData
              }

              json_responseBody = json.dumps(responseBody)

              headers = {
                  'content-type': '',
                  'content-length': str(len(json_responseBody))
              }

              try:
                  response = http.request('PUT', responseUrl, body=json_responseBody, headers=headers)
                  print("Status code: ", response.status)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): ", e)
 
  CustomResource:
    Type: 'Custom::TriggerLambda'
    Properties:
      ServiceToken: !GetAtt MyLambdaFunction.Arn
Outputs:
  DynamoDBTableName:
    Value: !Ref myDynamoDBTable
